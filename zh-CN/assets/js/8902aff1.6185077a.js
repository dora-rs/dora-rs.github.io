"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[1382],{3755:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api/testing-nodes","title":"Testing Nodes","description":"To ensure that a node behaves as expected, you probably want to do some testing. There are multiple","source":"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/api/testing-nodes.md","sourceDirName":"api","slug":"/api/testing-nodes","permalink":"/zh-CN/docs/api/testing-nodes","draft":false,"unlisted":false,"editUrl":"https://crowdin.com/dora-rs/zh-CN","tags":[],"version":"current","frontMatter":{}}');var i=n(74848),o=n(28453);const r={},a="Testing Nodes",d={},l=[{value:"Interactive Mode",id:"interactive-mode",level:2},{value:"Example",id:"example",level:3},{value:"JSON data",id:"json-data",level:3}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"testing-nodes",children:"Testing Nodes"})}),"\n",(0,i.jsx)(t.p,{children:"To ensure that a node behaves as expected, you probably want to do some testing. There are multiple\nlevels of testing:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsxs)(t.strong,{children:[(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Unit_testing",children:"Unit testing"}),":"]}),"\nVerify that a specific function or component behaves as expected."]}),"\n",(0,i.jsxs)(t.p,{children:["Nodes are normal executables/scripts, so you can use the standard testing tools of your chosen\nprogramming language for unit testing. For example, for Rust nodes you can use Rust's built-in\n",(0,i.jsx)(t.a,{href:"https://doc.rust-lang.org/book/ch11-01-writing-tests.html",children:"test framework"})," combined with\n",(0,i.jsx)(t.code,{children:"cargo test"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsxs)(t.strong,{children:["[",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Integration_testing",children:"Integration testing"}),"]:"]}),"\nVerify that a node reacts as expected to a set of inputs and that it produces the expected outputs."]}),"\n",(0,i.jsxs)(t.p,{children:["Dora does ",(0,i.jsx)(t.em,{children:"not"}),' offer an automated integration testing feature yet. We plan to add a way\nto run nodes in a standalone "test mode" where inputs are supplied through a special input file\nand outputs are written to an output file. This will enable integration testing of nodes as you\ncan verify that each node reacts as expected to given outputs.']}),"\n",(0,i.jsxs)(t.p,{children:["However, Dora nodes can be run in a standalone ",(0,i.jsxs)(t.em,{children:['"',(0,i.jsx)(t.a,{href:"#interactive-mode",children:"interactive mode"}),'"']}),", where\ninputs are given through the command line. This feature is useful for manual integration testing.\nSee ",(0,i.jsx)(t.a,{href:"#interactive-mode",children:"below"})," for details."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsxs)(t.strong,{children:[(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/System_testing",children:"End-to-end testing"}),":"]}),"\nVerify that a full dataflow with multiple nodes works as expected."]}),"\n",(0,i.jsxs)(t.p,{children:["This sort of testing is often done manually, using the ",(0,i.jsx)(t.code,{children:"dora run"})," or ",(0,i.jsx)(t.code,{children:"dora start"})," CLI commands.\nIf your dataflow has well-defined exit conditions, you can also run automated tests through\n",(0,i.jsx)(t.code,{children:"dora run"}),": the exit status will report whether any error occurred."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"interactive-mode",children:"Interactive Mode"}),"\n",(0,i.jsxs)(t.p,{children:["The interactive mode enables starting a node in a standalone mode that prompts for inputs on the\nterminal. It is available for all nodes that use the ",(0,i.jsx)(t.code,{children:"init_from_env"})," or ",(0,i.jsx)(t.code,{children:"init_interactive"}),"\nfunction for their initialization. To start the interactive mode, start your node executable/script\nmanually like a normal executable."]}),"\n",(0,i.jsxs)(t.p,{children:["Instead of connecting to a ",(0,i.jsx)(t.code,{children:"dora daemon"}),", this interactive mode will prompt for node inputs\non the terminal. In this mode, the node is completely isolated from the dora daemon and\nother nodes, so it cannot be part of a dataflow."]}),"\n",(0,i.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(t.p,{children:["Run any node that uses ",(0,i.jsx)(t.code,{children:"init_interactive"})," or ",(0,i.jsx)(t.a,{href:"Self::init_from_env",children:(0,i.jsx)(t.code,{children:"init_from_env"})}),' directly\nfrom a terminal. The node will then start in "interactive mode" and prompt you for the next\ninput:']}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"> cargo build -p rust-dataflow-example-node\n> target/debug/rust-dataflow-example-node\nhello\nStarting node in interactive mode as DORA_NODE_CONFIG env variable is not set\nNode asks for next input\n? Input ID\n[empty input ID to stop]\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"rust-dataflow-example-node"})," expects a ",(0,i.jsx)(t.code,{children:"tick"})," input, so let's set the input ID to\n",(0,i.jsx)(t.code,{children:"tick"}),'. Tick messages don\'t have any data, so we leave the "Data" empty when prompted:']}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"Node asks for next input\n> Input ID tick\n> Data\ntick 0, sending 0x943ed1be20c711a4\nnode sends output random with data: PrimitiveArray<UInt64>\n[\n  10682205980693303716,\n]\nNode asks for next input\n? Input ID\n[empty input ID to stop]\n"})}),"\n",(0,i.jsxs)(t.p,{children:["We see that both the ",(0,i.jsx)(t.code,{children:"stdout"})," output of the node and also the output messages that it sends\nare printed to the terminal. Then we get another prompt for the next input."]}),"\n",(0,i.jsx)(t.p,{children:"If you want to send an input with data, you can either send it as text (for string data)\nor as a JSON object (for struct data). Other data types are not supported currently."}),"\n",(0,i.jsx)(t.p,{children:"Empty input IDs are interpreted as stop instructions:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"> Input ID\ngiven input ID is empty -> stopping\nReceived stop\nNode asks for next input\nevent channel was stopped -> returning empty event list\nnode reports EventStreamDropped\nnode reports closed outputs []\nnode reports OutputsDone\n"})}),"\n",(0,i.jsxs)(t.p,{children:["In addition to the node output, we see log messages for the different events that the node\nreports. After ",(0,i.jsx)(t.code,{children:"OutputsDone"}),", the node should exit."]}),"\n",(0,i.jsx)(t.h3,{id:"json-data",children:"JSON data"}),"\n",(0,i.jsxs)(t.p,{children:["In addition to text input, the ",(0,i.jsx)(t.code,{children:"Data"})," prompt also supports JSON objects, which will be\nconverted to Apache Arrow struct arrays:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'Node asks for next input\n> Input ID some_input\n> Data { "field_1": 42, "field_2": { "inner": "foo" } }\n'})}),"\n",(0,i.jsx)(t.p,{children:"This JSON data is converted to the following Arrow array:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'StructArray\n-- validity: [valid, ]\n[\n  -- child 0: "field_1" (Int64)\n     PrimitiveArray<Int64>\n     [42,]\n  -- child 1: "field_2" (Struct([Field { name: "inner", data_type: Utf8, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }]))\n     StructArray\n     -- validity: [valid,]\n     [\n       -- child 0: "inner" (Utf8)\n       StringArray\n       ["foo",]\n     ]\n]\n'})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(96540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);