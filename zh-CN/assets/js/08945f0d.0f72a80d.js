"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[7821],{90633:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var d=n(74848),o=n(28453);const i={},s="\u6570\u636e\u6d41\u89c4\u8303",r={id:"api/dataflow-config",title:"\u6570\u636e\u6d41\u89c4\u8303",description:"Dora dataflows are specified through a YAML file. This dataflow configuration file specifies the nodes of the dataflow and their inputs and outputs. It also allows configuring communication parameters and enabling debug options.",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/api/dataflow-config.md",sourceDirName:"api",slug:"/api/dataflow-config",permalink:"/zh-CN/docs/api/dataflow-config",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/dora-rs/zh-CN",tags:[],version:"current",frontMatter:{}},a={},l=[{value:"Defining Nodes",id:"defining-nodes",level:2},{value:"\u8f93\u5165\u548c\u8f93\u51fa",id:"\u8f93\u5165\u548c\u8f93\u51fa",level:3},{value:"Input/Output Example",id:"inputoutput-example",level:4},{value:"Fields Controlling Node Execution",id:"fields-controlling-node-execution",level:3},{value:"<code>path</code> (required)",id:"path-required",level:5},{value:"<code>args</code> and <code>env</code>",id:"args-and-env",level:5},{value:"Fields Controlling Node Build",id:"fields-controlling-node-build",level:3},{value:"<code>build</code>",id:"build",level:5},{value:"<code>git</code>",id:"git",level:4},{value:"Operators",id:"operators",level:2},{value:"Other Dataflow Fields",id:"other-dataflow-fields",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(t.h1,{id:"\u6570\u636e\u6d41\u89c4\u8303",children:"\u6570\u636e\u6d41\u89c4\u8303"}),"\n",(0,d.jsx)(t.p,{children:"Dora dataflows are specified through a YAML file. This dataflow configuration file specifies the nodes of the dataflow and their inputs and outputs. It also allows configuring communication parameters and enabling debug options."}),"\n",(0,d.jsxs)(t.p,{children:["This article provides an introduction to the dataflow file format and its most important fields. For a complete reference of all available fields their behavior check ouf the documentation of the ",(0,d.jsx)(t.a,{href:"https://docs.rs/dora-core/0.3.12/dora_core/descriptor/struct.Descriptor.html",children:(0,d.jsx)(t.code,{children:"Descriptor"})})," and ",(0,d.jsx)(t.a,{href:"https://docs.rs/dora-core/0.3.12/dora_core/descriptor/struct.Node.html",children:(0,d.jsx)(t.code,{children:"Node"})})," structs."]}),"\n",(0,d.jsx)(t.h2,{id:"defining-nodes",children:"Defining Nodes"}),"\n",(0,d.jsxs)(t.p,{children:["The most important field in a dataflow configuration file is the ",(0,d.jsx)(t.code,{children:"nodes"})," field, which lists the nodes of the dataflow. Each node is identified by a unique ",(0,d.jsx)(t.code,{children:"id"}),":"]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-yaml",children:"nodes:\n  - id: foo\n    path: path/to/the/executable\n    # ... (see below)\n  - id: bar\n    path: path/to/another/executable\n    # ... (see below)\n"})}),"\n",(0,d.jsxs)(t.p,{children:["For each node, you need to specify the ",(0,d.jsx)(t.code,{children:"path"})," of the executable or script that Dora should run when starting the node. Most of the other node fields are optional, but you typically want to specify at least some ",(0,d.jsx)(t.code,{children:"inputs"})," and/or ",(0,d.jsx)(t.code,{children:"outputs"}),"."]}),"\n",(0,d.jsx)(t.h3,{id:"\u8f93\u5165\u548c\u8f93\u51fa",children:"\u8f93\u5165\u548c\u8f93\u51fa"}),"\n",(0,d.jsx)(t.p,{children:"Nodes can send output messages that can be received by other nodes as input. All inputs and outputs need to be specified in the dataflow configuration file."}),"\n",(0,d.jsxs)(t.p,{children:["For each node, list all output IDs that it sends under the ",(0,d.jsx)(t.a,{href:"https://docs.rs/dora-core/latest/dora_core/descriptor/struct.Node.html#structfield.outputs",children:(0,d.jsx)(t.code,{children:"outputs"})})," key. Only the specified output IDs are valid to be used in output sending functions such as ",(0,d.jsx)(t.a,{href:"https://docs.rs/dora-node-api/latest/dora_node_api/struct.DoraNode.html#method.send_output",children:(0,d.jsx)(t.code,{children:"send_output"})}),"."]}),"\n",(0,d.jsxs)(t.p,{children:["Receiving nodes can subscribe to outputs by listing them in their ",(0,d.jsx)(t.a,{href:"https://docs.rs/dora-core/latest/dora_core/descriptor/struct.Node.html#structfield.inputs",children:(0,d.jsx)(t.code,{children:"inputs"})})," field. The ",(0,d.jsx)(t.code,{children:"inputs"})," field should be a key-value map of the following format: ",(0,d.jsx)(t.code,{children:"input_id: source_node_id/source_node_output_id"})]}),"\n",(0,d.jsx)(t.p,{children:"The components are defined as follows:"}),"\n",(0,d.jsxs)(t.ul,{children:["\n",(0,d.jsxs)(t.li,{children:[(0,d.jsx)(t.code,{children:"input_id"})," is the local identifier that should be used for this input. This will map to the ",(0,d.jsx)(t.code,{children:"id"})," field of ",(0,d.jsx)(t.a,{href:"https://docs.rs/dora-node-api/latest/dora_node_api/enum.Event.html#variant.Input",children:(0,d.jsx)(t.code,{children:"Event::Input"})})," events sent to the node event loop."]}),"\n",(0,d.jsxs)(t.li,{children:[(0,d.jsx)(t.code,{children:"source_node_id"})," should be the ",(0,d.jsx)(t.code,{children:"id"})," field of the node that sends the output that we want to subscribe to"]}),"\n",(0,d.jsxs)(t.li,{children:[(0,d.jsx)(t.code,{children:"source_node_output_id"})," should be the identifier of the output that that we want to subscribe to"]}),"\n"]}),"\n",(0,d.jsx)(t.h4,{id:"inputoutput-example",children:"Input/Output Example"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-yaml",children:"nodes:\n  - id: example-node\n    outputs:\n      - one\n      - two\n  - id: receiver\n    inputs:\n        my_input: example-node/two\n"})}),"\n",(0,d.jsx)(t.h3,{id:"fields-controlling-node-execution",children:"Fields Controlling Node Execution"}),"\n",(0,d.jsx)(t.p,{children:"Use the following fields to define how a node is executed, including command-line arguments and environment variables."}),"\n",(0,d.jsxs)(t.h5,{id:"path-required",children:[(0,d.jsx)(t.code,{children:"path"})," (required)"]}),"\n",(0,d.jsx)(t.p,{children:"Specifies the path of the executable or script that Dora should run when starting the dataflow. This can point to a normal executable (e.g. when using a compiled language such as Rust) or a Python script."}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-yaml",children:"nodes:\n  - id: rust-example\n    path: target/release/rust-node\n  - id: python-example\n    path: ./receive_data.py\n"})}),"\n",(0,d.jsxs)(t.p,{children:["See the ",(0,d.jsxs)(t.a,{href:"https://docs.rs/dora-core/latest/dora_core/descriptor/struct.Node.html#structfield.path",children:[(0,d.jsx)(t.code,{children:"path"})," field documentation"]})," for details."]}),"\n",(0,d.jsxs)(t.h5,{id:"args-and-env",children:[(0,d.jsx)(t.code,{children:"args"})," and ",(0,d.jsx)(t.code,{children:"env"})]}),"\n",(0,d.jsxs)(t.p,{children:["Use the ",(0,d.jsx)(t.a,{href:"https://docs.rs/dora-core/latest/dora_core/descriptor/struct.Node.html#structfield.args",children:(0,d.jsx)(t.code,{children:"args"})})," field to specify command-line arguments that should be passed to the executable/script specified in ",(0,d.jsx)(t.code,{children:"path"}),". Use the ",(0,d.jsx)(t.a,{href:"https://docs.rs/dora-core/latest/dora_core/descriptor/struct.Node.html#structfield.env",children:(0,d.jsx)(t.code,{children:"env"})})," field for setting environment variables."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-yaml",children:"nodes:\n  - id: example\n    path: example-node\n    args: -v --some-flag foo\n    env:\n      IMAGE_WIDTH: 640\n      IMAGE_HEIGHT: 480\n"})}),"\n",(0,d.jsx)(t.h3,{id:"fields-controlling-node-build",children:"Fields Controlling Node Build"}),"\n",(0,d.jsxs)(t.p,{children:["Use build fields define how a node is set up and built on ",(0,d.jsx)(t.code,{children:"dora build"}),". All build fields are optional."]}),"\n",(0,d.jsx)(t.h5,{id:"build",children:(0,d.jsx)(t.code,{children:"build"})}),"\n",(0,d.jsxs)(t.p,{children:["The ",(0,d.jsx)(t.a,{href:"https://docs.rs/dora-core/latest/dora_core/descriptor/struct.Node.html#structfield.build",children:(0,d.jsx)(t.code,{children:"build"})})," field specifies the command that should be invoked for building the node."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-yaml",children:"- id: build-example\n  build: cargo build -p receive_data --release\n  path: target/release/receive_data\n- id: multi-line-example\n  build: |\n      pip install flash-attn\n      pip install -e ../../node-hub/dora-phi4\n  path: dora-phi4\n"})}),"\n",(0,d.jsxs)(t.p,{children:[(0,d.jsxs)(t.strong,{children:["Special treatment of ",(0,d.jsx)(t.code,{children:"pip"}),":"]})," Build lines that start with ",(0,d.jsx)(t.code,{children:"pip"})," or ",(0,d.jsx)(t.code,{children:"pip3"})," are treated in a special way: If the ",(0,d.jsx)(t.code,{children:"--uv"})," argument is passed to the ",(0,d.jsx)(t.code,{children:"dora build"})," command, all ",(0,d.jsx)(t.code,{children:"pip"}),"/",(0,d.jsx)(t.code,{children:"pip3"})," commands are run through the ",(0,d.jsxs)(t.a,{href:"https://docs.astral.sh/uv/",children:[(0,d.jsx)(t.code,{children:"uv"})," package manager"]}),"."]}),"\n",(0,d.jsx)(t.h4,{id:"git",children:(0,d.jsx)(t.code,{children:"git"})}),"\n",(0,d.jsxs)(t.p,{children:["The ",(0,d.jsx)(t.a,{href:"https://docs.rs/dora-core/latest/dora_core/descriptor/struct.Node.html#structfield.git",children:(0,d.jsx)(t.code,{children:"git"})})," field allows downloading nodes from git repositories. This can be especially useful for distributed dataflows."]}),"\n",(0,d.jsxs)(t.p,{children:["When a ",(0,d.jsx)(t.code,{children:"git"})," key is specified, ",(0,d.jsx)(t.code,{children:"dora build"})," automatically clones the specified repository (or reuse an existing clone). Then it checks out the specified ",(0,d.jsx)(t.a,{href:"#branch",children:(0,d.jsx)(t.code,{children:"branch"})}),", ",(0,d.jsx)(t.a,{href:"#tag",children:(0,d.jsx)(t.code,{children:"tag"})}),", or ",(0,d.jsx)(t.a,{href:"#rev",children:(0,d.jsx)(t.code,{children:"rev"})}),", or the default branch if none of them are specified. Afterwards it runs the ",(0,d.jsx)(t.code,{children:"build"})," command if specified."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-yaml",children:"nodes:\n  - id: rust-node\n    git: https://github.com/dora-rs/dora.git\n    branch: main\n    build: cargo build -p rust-dataflow-example-node\n    path: target/debug/rust-dataflow-example-node\n"})}),"\n",(0,d.jsx)(t.h2,{id:"operators",children:"Operators"}),"\n",(0,d.jsx)(t.p,{children:"Operators are an experimental, lightweight alternative to nodes. Instead of running as a separate process, operators are linked into a runtime process. This allows running multiple operators to share a single address space (not supported for Python currently)."}),"\n",(0,d.jsxs)(t.p,{children:["Operators are defined as part of the node list, as children of a runtime node. A runtime node is a special node that specifies no ",(0,d.jsx)(t.code,{children:"path"})," field, but contains an ",(0,d.jsx)(t.a,{href:"https://docs.rs/dora-core/latest/dora_core/descriptor/struct.Node.html#structfield.operators",children:(0,d.jsx)(t.code,{children:"operators"})})," field instead."]}),"\n",(0,d.jsx)(t.h2,{id:"other-dataflow-fields",children:"Other Dataflow Fields"}),"\n",(0,d.jsxs)(t.p,{children:["See the ",(0,d.jsx)(t.a,{href:"https://docs.rs/dora-core/latest/dora_core/descriptor/struct.Descriptor.html",children:(0,d.jsx)(t.code,{children:"Descriptor"})})," struct for a full list of supported fields."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var d=n(96540);const o={},i=d.createContext(o);function s(e){const t=d.useContext(i);return d.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),d.createElement(i.Provider,{value:t},e.children)}}}]);