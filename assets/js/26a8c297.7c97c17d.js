"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[1239],{6235:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>l});var t=o(4848),r=o(8453);const d={},a=void 0,i={id:"api/cli",title:"cli",description:"\x3c!---",source:"@site/docs/api/cli.md",sourceDirName:"api",slug:"/api/cli",permalink:"/docs/api/cli",draft:!1,unlisted:!1,editUrl:"https://github.com/dora-rs/dora-rs.github.io/edit/main/docs/api/cli.md",tags:[],version:"current",frontMatter:{}},s={},l=[{value:"Overview",id:"overview",level:2},{value:"<code>up</code>",id:"up",level:2},{value:"<code>new</code>",id:"new",level:2},{value:"<code>start</code>",id:"start",level:2},{value:"<code>list</code>",id:"list",level:2},{value:"<code>logs</code>",id:"logs",level:2},{value:"<code>check</code>",id:"check",level:2},{value:"<code>stop</code>",id:"stop",level:2},{value:"<code>destroy</code>",id:"destroy",level:2},{value:"<code>graph</code>",id:"graph",level:2},{value:"<code>--version</code>",id:"--version",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"dora-rs cli client\n\nUsage: dora <COMMAND>\n\nCommands:\n  check        Check if the coordinator and the daemon is running\n  graph        Generate a visualization of the given graph using mermaid.js. Use --open to open\n                   browser\n  build        Run build commands provided in the given dataflow\n  new          Generate a new project or node. Choose the language between Rust, Python, C or\n                   C++\n  up           Spawn coordinator and daemon in local mode (with default config)\n  destroy      Destroy running coordinator and daemon. If some dataflows are still running, they\n                   will be stopped first\n  start        Start the given dataflow path. Attach a name to the running dataflow by using\n                   --name\n  stop         Stop the given dataflow UUID. If no id is provided, you will be able to choose\n                   between the running dataflows\n  list         List running dataflows\n  logs         Show logs of a given dataflow and node\n  daemon       Run daemon\n  runtime      Run runtime\n  coordinator  Run coordinator\n  help         Print this message or the help of the given subcommand(s)\n\nOptions:\n  -h, --help     Print help\n  -V, --version  Print version\n"})}),"\n",(0,t.jsx)(n.h2,{id:"up",children:(0,t.jsx)(n.code,{children:"up"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Spawn coordinator and daemon in local mode (with default config)\n\nUsage: dora up\n\nOptions:\n  -h, --help  Print help\n"})}),"\n",(0,t.jsx)(n.h2,{id:"new",children:(0,t.jsx)(n.code,{children:"new"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Generate a new project or node. Choose the language between Rust, Python, C or C++\n\nUsage: dora new [OPTIONS] <NAME>\n\nArguments:\n  <NAME>  Desired name of the entity\n\nOptions:\n      --kind <KIND>  The entity that should be created [default: dataflow] [possible values:\n                     dataflow, custom-node]\n      --lang <LANG>  The programming language that should be used [default: rust] [possible values:\n                     rust, python, c, cxx]\n  -h, --help         Print help\n"})}),"\n",(0,t.jsx)(n.h2,{id:"start",children:(0,t.jsx)(n.code,{children:"start"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Start the given dataflow path. Attach a name to the running dataflow by using --name\n\nUsage: dora start [OPTIONS] <PATH>\n\nArguments:\n  <PATH>  Path to the dataflow descriptor file\n\nOptions:\n      --name <NAME>              Assign a name to the dataflow\n      --coordinator-addr <IP>    Address of the dora coordinator [default: 127.0.0.1]\n      --coordinator-port <PORT>  Port number of the coordinator control server [default: 6012]\n      --attach                   Attach to the dataflow and wait for its completion\n      --hot-reload               Enable hot reloading (Python only)\n  -h, --help                     Print help\n"})}),"\n",(0,t.jsx)(n.h2,{id:"list",children:(0,t.jsx)(n.code,{children:"list"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"List running dataflows\n\nUsage: dora list [OPTIONS]\n\nOptions:\n      --coordinator-addr <IP>    Address of the dora coordinator [default: 127.0.0.1]\n      --coordinator-port <PORT>  Port number of the coordinator control server [default: 6012]\n  -h, --help                     Print help\n"})}),"\n",(0,t.jsx)(n.h2,{id:"logs",children:(0,t.jsx)(n.code,{children:"logs"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Show logs of a given dataflow and node\n\nUsage: dora logs [OPTIONS] [UUID_OR_NAME] <NAME>\n\nArguments:\n  [UUID_OR_NAME]  Identifier of the dataflow\n  <NAME>          Show logs for the given node\n\nOptions:\n      --coordinator-addr <IP>    Address of the dora coordinator [default: 127.0.0.1]\n      --coordinator-port <PORT>  Port number of the coordinator control server [default: 6012]\n  -h, --help                     Print help\n"})}),"\n",(0,t.jsx)(n.h2,{id:"check",children:(0,t.jsx)(n.code,{children:"check"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Check if the coordinator and the daemon is running\n\nUsage: dora check [OPTIONS]\n\nOptions:\n      --dataflow <PATH>          Path to the dataflow descriptor file (enables additional checks)\n      --coordinator-addr <IP>    Address of the dora coordinator [default: 127.0.0.1]\n      --coordinator-port <PORT>  Port number of the coordinator control server [default: 6012]\n  -h, --help                     Print help\n"})}),"\n",(0,t.jsx)(n.h2,{id:"stop",children:(0,t.jsx)(n.code,{children:"stop"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Stop the given dataflow UUID. If no id is provided, you will be able to choose between the running\ndataflows\n\nUsage: dora stop [OPTIONS] [UUID]\n\nArguments:\n  [UUID]  UUID of the dataflow that should be stopped\n\nOptions:\n      --name <NAME>                Name of the dataflow that should be stopped\n      --grace-duration <DURATION>  Kill the dataflow if it doesn't stop after the given duration\n      --coordinator-addr <IP>      Address of the dora coordinator [default: 127.0.0.1]\n      --coordinator-port <PORT>    Port number of the coordinator control server [default: 6012]\n  -h, --help                       Print help\n"})}),"\n",(0,t.jsx)(n.h2,{id:"destroy",children:(0,t.jsx)(n.code,{children:"destroy"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Destroy running coordinator and daemon. If some dataflows are still running, they will be stopped\nfirst\n\nUsage: dora destroy [OPTIONS]\n\nOptions:\n      --coordinator-addr <IP>    Address of the dora coordinator [default: 127.0.0.1]\n      --coordinator-port <PORT>  Port number of the coordinator control server [default: 6012]\n  -h, --help                     Print help\n"})}),"\n",(0,t.jsx)(n.h2,{id:"graph",children:(0,t.jsx)(n.code,{children:"graph"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Generate a visualization of the given graph using mermaid.js. Use --open to open browser\n\nUsage: dora graph [OPTIONS] <PATH>\n\nArguments:\n  <PATH>  Path to the dataflow descriptor file\n\nOptions:\n      --mermaid  Visualize the dataflow as a Mermaid diagram (instead of HTML)\n      --open     Open the HTML visualization in the browser\n  -h, --help     Print help\n"})}),"\n",(0,t.jsx)(n.h2,{id:"--version",children:(0,t.jsx)(n.code,{children:"--version"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Returns the current version of dora\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command will show the current version of dora."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>i});var t=o(6540);const r={},d=t.createContext(r);function a(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);