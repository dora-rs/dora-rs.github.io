"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[5739],{16226:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var n=s(74848),a=s(28453);const r={},o="State Management",i={id:"references/state-management",title:"State Management",description:"Most operations require to keep some sort of state between calls. This document describes the different ways to handle state in dora.",source:"@site/docs/references/state-management.md",sourceDirName:"references",slug:"/references/state-management",permalink:"/docs/references/state-management",draft:!1,unlisted:!1,editUrl:"https://github.com/dora-rs/dora-rs.github.io/edit/main/docs/references/state-management.md",tags:[],version:"current",frontMatter:{},sidebar:"references",previous:{title:"Design Overview",permalink:"/docs/references/overview"}},c={},d=[{value:"Internal State",id:"internal-state",level:2},{value:"Saving State",id:"saving-state",level:2},{value:"State Recovery",id:"state-recovery",level:3},{value:"Sharing State",id:"sharing-state",level:2},{value:"Node",id:"node",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"state-management",children:"State Management"}),"\n",(0,n.jsx)(t.p,{children:"Most operations require to keep some sort of state between calls. This document describes the different ways to handle state in dora."}),"\n",(0,n.jsx)(t.h2,{id:"internal-state",children:"Internal State"}),"\n",(0,n.jsxs)(t.p,{children:["Operators are ",(0,n.jsx)(t.code,{children:"struct"})," or object instances, so they can keep internal state between invocations. This state is private to the operator. When an operator exits or crashes, its internal state is lost."]}),"\n",(0,n.jsx)(t.h2,{id:"saving-state",children:"Saving State"}),"\n",(0,n.jsxs)(t.p,{children:["To make themselves resilient against crashes, operators can use dora's state management. The dora runtime provides each operator with a private key-value store (KVS). Operators can save serialized state into the KVS by using the ",(0,n.jsx)(t.code,{children:"save_state"})," function of the runtime:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"fn save_state(key: &str, value: Vec<u8>)\n"})}),"\n",(0,n.jsx)(t.p,{children:"The runtime only stores the latest value for each key, so subsequent writes to the same key replace the earlier values. Serialization is required because the state must be self-contained (i.e. no pointers to other memory) and consistent (i.e. no half-updated state). Otherwise, state recovery might not be possible after an operator crash."}),"\n",(0,n.jsx)(t.p,{children:"To keep the performance overhead of this function low, it is recommended to use a suitable serialization format that stores the data with minimal memory and compute overhead. Text-based formats such as JSON are not recommended. Also, fast-changing state should be stored under a separate key to minimize the amount of state that needs to be written."}),"\n",(0,n.jsx)(t.h3,{id:"state-recovery",children:"State Recovery"}),"\n",(0,n.jsxs)(t.p,{children:["When an operator crashes, the dora runtime restarts it and supplies it with the last version of the saved state. It does this by calling the operator's ",(0,n.jsx)(t.code,{children:"restore_state"})," method:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"fn restore_state(&mut self, state: HashMap<String, Vec<u8>>)\n"})}),"\n",(0,n.jsx)(t.p,{children:"In this method, the operator should deserialize and apply all state entries, and perform all custom consistency checks that are necessary."}),"\n",(0,n.jsx)(t.h2,{id:"sharing-state",children:"Sharing State"}),"\n",(0,n.jsx)(t.p,{children:"To share state between operators, dora provides access to a node-local key-value store:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"fn kvs_write(key: &str, value: Vec<u8>)\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-rust",children:"fn kvs_read(key: &str) -> Vec<u8>\n"})}),"\n",(0,n.jsx)(t.p,{children:"Todo:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Consistency?"}),"\n",(0,n.jsx)(t.li,{children:"Anna?"}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"node",children:"Node"}),"\n",(0,n.jsxs)(t.p,{children:["Nodes have full control over the execution, so they can implement their own state management. Shared state can be accessed through the ",(0,n.jsx)(t.code,{children:"kvs_read"})," and ",(0,n.jsx)(t.code,{children:"kvs_write"})," functions of the dora library, which are equivalent to the respective functions provided by the dora runtime."]}),"\n",(0,n.jsxs)(t.p,{children:["Since nodes cannot use the recovery feature of the dora runtime, the ",(0,n.jsx)(t.code,{children:"save_state"}),"/",(0,n.jsx)(t.code,{children:"restore_state"})," functions are not available for them."]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>i});var n=s(96540);const a={},r=n.createContext(a);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);