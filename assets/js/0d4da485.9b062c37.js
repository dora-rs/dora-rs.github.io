"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[4945],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(96540);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}},97295:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"references/communication-layer","title":"Middleware layer abstraction(MLA)","description":"Discussion: Middleware (communication) layer abstraction (MLA)","source":"@site/docs/references/communication-layer.md","sourceDirName":"references","slug":"/references/communication-layer","permalink":"/docs/references/communication-layer","draft":false,"unlisted":false,"editUrl":"https://github.com/dora-rs/dora-rs.github.io/edit/main/docs/references/communication-layer.md","tags":[],"version":"current","frontMatter":{},"sidebar":"references","previous":{"title":"Reference","permalink":"/docs/references/"},"next":{"title":"Framework","permalink":"/docs/references/library-vs-framework"}}');var i=r(74848),t=r(28453);const o={},a="Middleware layer abstraction(MLA)",l={},c=[];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"middleware-layer-abstractionmla",children:"Middleware layer abstraction(MLA)"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Discussion: ",(0,i.jsx)(n.a,{href:"https://github.com/dora-rs/dora/discussions/53",children:"Middleware (communication) layer abstraction (MLA)"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"dora"})," needs to implement MLA as a separate crate to provides a middleware abstraction layer that enables scalable, high performance communications for inter async tasks, intra-process (OS threads), interprocess communication on a single computer node or between different nodes in a computer network. MLA needs to support different communication patterns:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"publish-subscribe push / push pattern - the published message is pushed to subscribers"}),"\n",(0,i.jsx)(n.li,{children:"publish-subscribe push / pull pattern - the published message is write to storage and later pulled by subscribers"}),"\n",(0,i.jsx)(n.li,{children:"Request / reply pattern"}),"\n",(0,i.jsx)(n.li,{children:"Point-to-point pattern"}),"\n",(0,i.jsx)(n.li,{children:"Client / Server pattern"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The MLA needs to abstract following details:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"inter-async tasks (e.g., tokio channels), intraprocess (OS threads, e.g., shared memory), interprocess and inter-host / inter-network communication"}),"\n",(0,i.jsx)(n.li,{children:"different transport layer implementations (shared memory, UDP, TCP)"}),"\n",(0,i.jsx)(n.li,{children:"builtin support for multiple serialization / deserialization protocols, e.g, capnproto, protobuf, flatbuffers etc"}),"\n",(0,i.jsx)(n.li,{children:"different language bindings to Rust, Python, C, C++ etc"}),"\n",(0,i.jsx)(n.li,{children:"telemetry tools for logs, metrics, distributed tracing, live data monitoring (e.g., tap a live data), recording and replay"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Rust eco-system has abundant crates to provide underlaying communications, e.g.,:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"tokio / crossbeam provides different types of channels serving different purpose: mpsc, oneshot, broadcast, watch etc"}),"\n",(0,i.jsx)(n.li,{children:"Tonic provides gRPC services"}),"\n",(0,i.jsx)(n.li,{children:"Tower provides request/reply service"}),"\n",(0,i.jsx)(n.li,{children:"Zenoh middleware provides many different pub/sub capabilities"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"MLA also needs to provide high level APIs:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"publish(topic, value, optional fields):- optional fields may contain senders' identify to help MLA logics to satify above requirements"}),"\n",(0,i.jsx)(n.li,{children:"subscriber(topic, optional fields)-> future streams"}),"\n",(0,i.jsx)(n.li,{children:"put(key, value, optional fields)"}),"\n",(0,i.jsx)(n.li,{children:"get(key, optional fields) -> value"}),"\n",(0,i.jsx)(n.li,{children:"send(key, msg, optional fields)"}),"\n",(0,i.jsx)(n.li,{children:"recv(key, optional fields)->value"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["More info here: ",(0,i.jsx)(n.a,{href:"https://github.com/dora-rs/dora/discussions/53",children:"#53"})]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);