"use strict";(self.webpackChunkdora_rs_github_io=self.webpackChunkdora_rs_github_io||[]).push([[7095],{59145:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var d=t(74848),r=t(28453);const i={},o="C API",a={id:"api/c-api",title:"C API",description:"initdoracontextfromenv",source:"@site/docs/api/c-api.md",sourceDirName:"api",slug:"/api/c-api",permalink:"/docs/api/c-api",draft:!1,unlisted:!1,editUrl:"https://github.com/dora-rs/dora-rs.github.io/edit/main/docs/api/c-api.md",tags:[],version:"current",frontMatter:{}},c={},l=[{value:"<code>init_dora_context_from_env</code>",id:"init_dora_context_from_env",level:2},{value:"<code>dora_next_event</code>",id:"dora_next_event",level:2},{value:"<code>dora_send_output</code>",id:"dora_send_output",level:2},{value:"Try it out!",id:"try-it-out",level:4}];function s(e){const n={code:"code",h1:"h1",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h1,{id:"c-api",children:"C API"}),"\n",(0,d.jsx)(n.h2,{id:"init_dora_context_from_env",children:(0,d.jsx)(n.code,{children:"init_dora_context_from_env"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"init_dora_context_from_env"})," initiate a node from environment variables set by ",(0,d.jsx)(n.code,{children:"dora-coordinator"})]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-c",children:"void *dora_context = init_dora_context_from_env();\n"})}),"\n",(0,d.jsx)(n.h2,{id:"dora_next_event",children:(0,d.jsx)(n.code,{children:"dora_next_event"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"dora_next_event"})," waits for the next event (e.g. an input). Use ",(0,d.jsx)(n.code,{children:"read_dora_event_type"})," to read the event's type. Inputs are of type ",(0,d.jsx)(n.code,{children:"DoraEventType_Input"}),". To extract the ID and data of an input event, use ",(0,d.jsx)(n.code,{children:"read_dora_input_id"})," and ",(0,d.jsx)(n.code,{children:"read_dora_input_data"})," on the returned pointer. It is safe to ignore any events and handle only the events that are relevant to the node."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-c",children:"void *input = dora_next_input(dora_context);\n\n// read out the ID as a UTF8-encoded string\nchar *id;\nsize_t id_len;\nread_dora_input_id(input, &id, &id_len);\n\n// read out the data as a byte array\nchar *data;\nsize_t data_len;\nread_dora_input_data(input, &data, &data_len);\n"})}),"\n",(0,d.jsx)(n.h2,{id:"dora_send_output",children:(0,d.jsx)(n.code,{children:"dora_send_output"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"dora_send_output"})," send data from the node."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-c",children:'char out_id[] = "tick";\nchar out_data[50];\ndora_send_output(dora_context, out_id, strlen(out_id), out_data, out_data_len);\n'})}),"\n",(0,d.jsx)(n.h4,{id:"try-it-out",children:"Try it out!"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Create an ",(0,d.jsx)(n.code,{children:"node.c"})," file:"]}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include "../../apis/c/node/node_api.h"\n\n// sleep\n#ifdef _WIN32\n#include <Windows.h>\n#else\n#include <unistd.h>\n#endif\n\nint main()\n{\n    printf("[c node] Hello World\\n");\n\n    void *dora_context = init_dora_context_from_env();\n    if (dora_context == NULL)\n    {\n        fprintf(stderr, "failed to init dora context\\n");\n        return -1;\n    }\n\n    printf("[c node] dora context initialized\\n");\n\n    for (char i = 0; i < 100; i++)\n    {\n        void *event = dora_next_event(dora_context);\n        if (event == NULL)\n        {\n            printf("[c node] ERROR: unexpected end of event\\n");\n            return -1;\n        }\n\n        enum DoraEventType ty = read_dora_event_type(event);\n\n        if (ty == DoraEventType_Input)\n        {\n            char *data;\n            size_t data_len;\n            read_dora_input_data(event, &data, &data_len);\n\n            assert(data_len == 0);\n\n            char out_id[] = "message";\n            char out_data[50];\n            int out_data_len = sprintf(out_data, "loop iteration %d", i);\n\n            dora_send_output(dora_context, out_id, strlen(out_id), out_data, out_data_len);\n        }\n        else if (ty == DoraEventType_Stop)\n        {\n            printf("[c node] received stop event\\n");\n        }\n        else\n        {\n            printf("[c node] received unexpected event: %d\\n", ty);\n        }\n\n        free_dora_event(event);\n    }\n\n    printf("[c node] received 10 events\\n");\n\n    free_dora_context(dora_context);\n\n    printf("[c node] finished successfully\\n");\n\n    return 0;\n}\n'})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Build the custom nodes:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Create a ",(0,d.jsx)(n.code,{children:"build"})," folder in this directory (i.e., next to the ",(0,d.jsx)(n.code,{children:"node.c"})," file)"]}),"\n",(0,d.jsxs)(n.li,{children:["Compile the ",(0,d.jsx)(n.code,{children:"dora-node-api-c"})," crate into a static library.","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Run ",(0,d.jsx)(n.code,{children:"cargo build -p dora-node-api-c --release"})]}),"\n",(0,d.jsxs)(n.li,{children:["The resulting staticlib is then available under ",(0,d.jsx)(n.code,{children:"../../target/release/libdora-node-api-c.a"}),"."]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["Compile the ",(0,d.jsx)(n.code,{children:"node.c"})," (e.g. using ",(0,d.jsx)(n.code,{children:"clang"}),") and link the staticlib","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["For example, use the following command:","\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"clang node.c <FLAGS> -ldora_node_api_c -L ../../target/release --output build/c_node\n"})}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["The ",(0,d.jsx)(n.code,{children:"<FLAGS>"})," depend on the operating system and the libraries that the C node uses. The following flags are required for each OS:","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Linux: ",(0,d.jsx)(n.code,{children:"-lm -lrt -ldl -pthread"})]}),"\n",(0,d.jsxs)(n.li,{children:["macOS: ",(0,d.jsx)(n.code,{children:"-framework CoreServices -framework Security -l System -l resolv -l pthread -l c -l m"})]}),"\n",(0,d.jsxs)(n.li,{children:["Windows:","\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"-ladvapi32 -luserenv -lkernel32 -lws2_32 -lbcrypt -lncrypt -lschannel -lntdll -liphlpapi\n-lcfgmgr32 -lcredui -lcrypt32 -lcryptnet -lfwpuclnt -lgdi32 -lmsimg32 -lmswsock -lole32\n-lopengl32 -lsecur32 -lshell32 -lsynchronization -luser32 -lwinspool\n-Wl,-nodefaultlib:libcmt -D_DLL -lmsvcrt\n"})}),"\n","Also: On Windows, the output file should have an ",(0,d.jsx)(n.code,{children:".exe"})," extension: ",(0,d.jsx)(n.code,{children:"--output build/c_node.exe"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["Repeat the previous step for the ",(0,d.jsx)(n.code,{children:"sink.c"})," executable"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(s,{...e})}):s(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var d=t(96540);const r={},i=d.createContext(r);function o(e){const n=d.useContext(i);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),d.createElement(i.Provider,{value:n},e.children)}}}]);